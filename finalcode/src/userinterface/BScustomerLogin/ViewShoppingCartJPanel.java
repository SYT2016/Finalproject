/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.BScustomerLogin;

import Business.Enterprise.BookstoreEnterprise;
import Business.Network.Network;
import Business.OrderSystem.Book;
import Business.OrderSystem.Order;
import Business.OrderSystem.OrderItem;
import Business.Organization.BS_BookManagementOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import static userinterface.MainJFrame.dB4OUtil;
import static userinterface.MainJFrame.system;

/**
 * @author wangcong
 */
public class ViewShoppingCartJPanel extends javax.swing.JPanel {
    private JPanel container;
    private UserAccount customer;
    private ArrayList<OrderItem> orderItemList;
    private Network network;
    private BookstoreEnterprise bookstore;

    /**
     * Creates new form ViewShoppingCartJPanel
     */
    public ViewShoppingCartJPanel(JPanel container, UserAccount customer, ArrayList<OrderItem> orderItemList,
                                  Network network, BookstoreEnterprise bookstore) {
        this.container = container;
        this.customer = customer;
        this.orderItemList = orderItemList;
        this.network = network;
        this.bookstore = bookstore;
         initComponents();
        this.setBackground(new Color(253,251,239));
        JTableHeader head = tblShoppingCart.getTableHeader(); // 创建表格标题对象
        head.setPreferredSize(new Dimension(head.getWidth(), 24));// 设置表头大小
        head.setFont(new Font("Times New Roman", Font.PLAIN, 24));// 设置表格字体
       txtTotalPrice.setEnabled(false);
        populateTable();
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblShoppingCart.getModel();
        model.setRowCount(0);
        for (OrderItem orderItem : orderItemList) {
            Object row[] = new Object[6];
            row[0] = orderItem;
            row[1] = orderItem.getNetwork();
            row[2] = orderItem.getBookstore();
            row[3] = orderItem.getOrderItemTotal();
            row[4] = orderItem.getSelectedbook().getStatus();
            row[5] = orderItem.getSelectedbook().getWanttedQuantity();
            model.addRow(row);
        }

        /*Set the total price*/
        double totalPrice = 0;
        for (OrderItem orderItem : orderItemList) {
            totalPrice = orderItem.getOrderItemTotal()+totalPrice;
        }
        txtTotalPrice.setText(String.valueOf(totalPrice));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblShoppingCart = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnCheckOut = new javax.swing.JButton();
        txtTotalPrice = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtComment = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();

        setBackground(new java.awt.Color(253, 251, 239));
        setPreferredSize(new java.awt.Dimension(950, 800));

        tblShoppingCart.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        tblShoppingCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "BookName", "Network", "Bookstore", "Price", "status", "Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblShoppingCart.setRowHeight(25);
        jScrollPane1.setViewportView(tblShoppingCart);
        if (tblShoppingCart.getColumnModel().getColumnCount() > 0) {
            tblShoppingCart.getColumnModel().getColumn(0).setResizable(false);
            tblShoppingCart.getColumnModel().getColumn(1).setResizable(false);
            tblShoppingCart.getColumnModel().getColumn(2).setResizable(false);
            tblShoppingCart.getColumnModel().getColumn(3).setResizable(false);
            tblShoppingCart.getColumnModel().getColumn(4).setResizable(false);
            tblShoppingCart.getColumnModel().getColumn(5).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Tekton Pro Ext", 3, 36)); // NOI18N
        jLabel1.setText("Your Shopping Cart!!!");

        btnCheckOut.setFont(new java.awt.Font("Tekton Pro Ext", 0, 36)); // NOI18N
        btnCheckOut.setText("Check Out!!!");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        txtTotalPrice.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        txtTotalPrice.setForeground(new java.awt.Color(204, 0, 102));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel2.setText("Total Price:");

        btnBack.setFont(new java.awt.Font("Tekton Pro Ext", 0, 36)); // NOI18N
        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel3.setText("Add your Comment:");

        txtComment.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N

        btnDelete.setFont(new java.awt.Font("Tekton Pro Ext", 0, 36)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnBack)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDelete))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtComment, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCheckOut)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(309, 309, 309)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBack)
                            .addComponent(btnDelete)
                            .addComponent(btnCheckOut))))
                .addGap(91, 91, 91))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed

        /*set order*/
        Order order = new Order();
        order.setOrderItems(new ArrayList<>(orderItemList));
        order.setStatus("Waiting Bookstore Process");
        order.setUserAccount(customer);
        order.setTotalPrice(txtTotalPrice.getText());
        order.setComments(txtComment.getText());

        /*set workRequest*/
        customer.getUserorderlist().add(order);
        WorkRequest workRequest = new WorkRequest();
        workRequest.setOrder(order);
        workRequest.setSenderUserAccount(customer);
        workRequest.setReceiverEnterprise(bookstore);
        workRequest.setStatus("Uncompleted");
        workRequest.setMessage(txtComment.getText());
        customer.getWorkQueue().addNewRequest(workRequest);

        /*add the workrequest to the Bookstore_manage organization*/
        ArrayList<Organization> bookManageList = bookstore.getOrganizationDirectory().getOrganizationList();
        for (Organization org : bookManageList) {
            if (org.getOrgtypename().equals("BS_BookManagementOrganization")) {
                BS_BookManagementOrganization bookstoreOrg = (BS_BookManagementOrganization) org;
                bookstoreOrg.getWorkQueue().addNewRequest(workRequest);
                ArrayList<Book> books = bookstoreOrg.getBookDirectory().getBooklist();
                /*inventroy subtraction*/
                for (OrderItem orderItem : orderItemList) {
                    int trueQuantity = orderItem.getSelectedbook().getTotalQuantity() - orderItem.getQuantity();
                    // ArrayList<Organization> orgs = bookstore.getOrganizationDirectory().getOrganizationList();
                    for (Book book : books) {
                        if (orderItem.getBookname().equals(book.getName())) {
                            book.setTotalQuantity(trueQuantity);
                        }
                    }
                }
            }
        }

        JOptionPane.showMessageDialog(null, "Check out sucessfully!");
        //dB4OUtil.storeSystem(system);
        DefaultTableModel model = (DefaultTableModel) tblShoppingCart.getModel();
        model.setRowCount(0);
        txtComment.setText("");
        orderItemList.clear();


    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = tblShoppingCart.getSelectedRow();
        if (selectedRow < 0){
              JOptionPane.showMessageDialog(null, "please select a Book!","Warning",JOptionPane.WARNING_MESSAGE);
              return;
          }
        OrderItem selectedItem = (OrderItem) tblShoppingCart.getValueAt(selectedRow, 0);
        //int returnNumber = selectedBook.getTotalQuantity()+selectedBook.getWanttedQuantity();
        orderItemList.remove(selectedItem);
        JOptionPane.showMessageDialog(null, "Delete Book Successfully!");

        populateTable();
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnDelete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblShoppingCart;
    private javax.swing.JTextField txtComment;
    private javax.swing.JTextField txtTotalPrice;
    // End of variables declaration//GEN-END:variables
}
